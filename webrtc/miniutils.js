      
import fs from 'fs';import{v4 as uuidv4}from'uuid';function getJsonFile(p){try{return JSON.parse(fs.readFileSync(p))}catch(e){console.error(`Error reading JSON file at ${p}:`,e.message);return{}}}async function pushLogs(cfg,name,err,clearLogsCb){if(!cfg?.logs){console.error('Config or logs path is missing.');return}if(!cfg.enableLogs){console.log(name,err?.message,err?.stack);return}if(clearLogsCb){if(typeof clearLogsCb!=='function'){console.error('clearLogsCallback is not a function.');return}try{await fs.promises.writeFile(cfg.logs,JSON.stringify({}));clearLogsCb(true);return}catch(e){console.error('Unable to clear logs:',e);clearLogsCb('Unable to clear logs.');return}}if(!name||!err?.message||!err?.stack){console.error('Invalid pushLogs parameters:',{name,error:err});return}try{const logs=getJsonFile(cfg.logs)||{};const logId=uuidv4();logs[logId]={name,message:err.message,stack:err.stack,date:new Date().toISOString()};await fs.promises.writeFile(cfg.logs,JSON.stringify(logs,null,2))}catch(e){console.error('Unable to write log:',e)}}const COLOR_CODES={reset:'\x1b[0m',blackFG:'\x1b[30m',redFG:'\x1b[31m',greenFG:'\x1b[32m',yellowFG:'\x1b[33m',blueFG:'\x1b[34m',pinkFG:'\x1b[35m',cyanFG:'\x1b[36m',whiteFG:'\x1b[37m',crimsonFG:'\x1b[38m',underline:'\x1b[4m',highlight:'\x1b[7m',yellowBG:'\x1b[43m',redBG:'\x1b[41m'};const BASH_COLORS_HELPER=Object.entries(COLOR_CODES).reduce((acc,[key,code])=>{if(key==='reset'){acc.reset=code}else{const methodName=`get${key.charAt(0).toUpperCase()}${key.slice(1)}`;acc[methodName]=(str='%s')=>`${code}${str}${COLOR_CODES.reset}`}return acc}, {});const CONST_STRINGS={ROOM_NOT_AVAILABLE:'Room not available',INVALID_PASSWORD:'Invalid password',USERID_NOT_AVAILABLE:'User ID does not exist',ROOM_PERMISSION_DENIED:'Room permission denied',ROOM_FULL:'Room full',DID_NOT_JOIN_ANY_ROOM:'Did not join any room yet',INVALID_SOCKET:'Invalid socket',PUBLIC_IDENTIFIER_MISSING:'publicRoomIdentifier is required',INVALID_ADMIN_CREDENTIAL:'Invalid username or password attempted'};function resolveURL(url){const isWin=process.platform.match(/^win/)!==null;return isWin?url.replace(/\//g,'\\'):url}export{pushLogs,getJsonFile,COLOR_CODES,BASH_COLORS_HELPER,CONST_STRINGS,resolveURL};

    